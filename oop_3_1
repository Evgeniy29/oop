#include <iostream>
 
using namespace std;
 
class Figure
{
	protected:
	int base;
	int height;
	double radius;

public:
	Figure() { }
    virtual void area() = 0;
   
};
 
class Parallelogram : public Figure
{
protected:
    int base;       //?????????
    int height;     //??????
public:
 
    Parallelogram(int value_base, int value_height) :base(value_base), height(value_height) {}
    void area() override
    {
        cout << "The area of the Parallelogram  is " << base * height <<endl;
    }
    
};
 
class Circle : public Figure
{
    double radius;
    
public:
    Circle(double value_radius) : radius(value_radius) {}
    void area() override
    {
        cout <<"The area of the Circle is " << 3.1415 * (radius * radius) <<endl;
    }
};
 
class Rectangle : public Parallelogram
{
public:
    Rectangle(int value_base, int value_height) : Parallelogram(value_base,value_height) {}
    void area() override
    {
        cout <<"The area of the Rectangle is " << base * height <<endl;
    }
};
 
class Square : public Parallelogram
{
public:
 
    Square(int value_base, int value_height) : Parallelogram(value_base,value_height) {}
 
    void area() override
    {
        cout << "The area of the Square  is " << base * height << endl;
    }
};
 
class Rhombus : public Parallelogram
{
public:
    Rhombus(int value_base, int value_height) : Parallelogram(value_base,value_height) {}
    void area() override
    {
        cout <<"The area of the Rhombus is " << base * height << endl;
    }
};
 
 
 
int main ()
{
 Parallelogram p(2,2);
 p.area();
 Circle c(2);
 c.area();
 Rectangle r(2,2);
 r.area();
 Square s(2,2);
 s.area();
 Rhombus rh(2,2);
 rh.area();
    return 0;
}